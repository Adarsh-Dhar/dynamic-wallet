generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  passwordHash  String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  otpCodes      OtpCode[]
  passkeys      Passkey[]
  refreshTokens RefreshToken[]
  vaults        Vault[]
}

model Vault {
  id            String   @id @default(uuid())
  userId        String
  label         String
  encryptedData String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  user          User     @relation(fields: [userId], references: [id])
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Passkey {
  id                  String   @id @default(uuid())
  userId              String
  credentialID        String   @unique
  credentialPublicKey String
  counter             Int      @default(0)
  transports          String[]
  name                String?
  lastUsedAt          DateTime @default(now())
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([credentialID])
}

model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  type      OtpType
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([code])
  @@index([expiresAt])
}

enum OtpType {
  EMAIL_VERIFICATION
  PASSWORD_RESET
  LOGIN_VERIFICATION
  TRANSACTION_APPROVAL
}
