// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  passwordHash    String     // Hashed password (bcrypt/argon2)
  vaults          Vault[]    // One or more encrypted vaults
  refreshTokens   RefreshToken[]
  passkeys        Passkey[]  // WebAuthn passkeys
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model Vault {
  id              String     @id @default(uuid())
  userId          String
  user            User       @relation(fields: [userId], references: [id])
  label           String     // Optional: e.g., "Default Wallet"
  encryptedData   String     // The entire encrypted vault (includes multiple keypairs)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
}

model RefreshToken {
  id          String   @id @default(uuid())
  token       String   @unique
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expiresAt   DateTime
  createdAt   DateTime @default(now())
  
  @@index([userId])
}

model Passkey {
  id                    String   @id @default(uuid())
  userId                String
  user                  User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  credentialID          String   @unique // Base64URL encoded credential ID
  credentialPublicKey   String   // Base64URL encoded public key
  counter               Int      @default(0)
  transports            String[] // Array of transport types (usb, nfc, ble, internal)
  name                  String?  // Optional name for the passkey
  lastUsedAt            DateTime @default(now())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  @@index([userId])
  @@index([credentialID])
}
